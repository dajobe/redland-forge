#!/bin/sh
#
# Build redland and check it works.  Intended to be called via build-redland-on
#
# $Id$
#

program=`basename $0`

tarball=$1
if [ "X$tarball" = "X" ]; then
  echo "USAGE $program: PACKAGE-TARBALL" 1>&2
  exit 1
fi

if [ ! -r $tarball ]; then
  echo "$program: tarball $tarball not found"
  exit 1
fi

dirname=`echo $tarball | sed -e 's,^.*/,,' -e 's/\.tar.gz$//'`
package=`echo $dirname | sed -e 's/-.*$//'`
version=`echo $dirname | sed -e 's/^.*-//'`

here=`pwd`

# DIRS
working=$here/build
logs=$working/logs
build=$working/$dirname
install=$working/install

# FILES
log_file=$logs/$program.log

######################################################################

echo "$program: Building $package $version"
echo "$program: System       `uname -srmn`"
echo "$program: Working area $working"
echo "$program: Logs         $logs"

rm -rf $working
mkdir $working $logs $install
cd $working

MAKE=make
for make in gnumake gmake make; do
  ($make --version 2>&1 | grep 'GNU Make') >/dev/null 2>&1
  result=$?
  if test $result -eq 0 ; then
    MAKE=$make
    break
  fi
done
export MAKE


gunzip < $here/$tarball | tar xf -

cd $build

llp=

(raptor-config --version) > /dev/null 2>&1
result=$?
if test $result -eq 0; then
  raptor_path=`raptor-config --prefix`
  llp=":$raptor_path/lib"
fi

here=`pwd`
if test `uname` = Darwin; then
  # OSX
  DYLD_LIBRARY_PATH=$install/lib$llp
  #:$here/librdf/.libs:$here/raptor/.libs$llp
  export DYLD_LIBRARY_PATH
  echo "$program: export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH"
else
  # Linux, Solaris, FreeBSD
  LD_LIBRARY_PATH=$install/lib$llp
  #:$here/librdf/.libs:$here/raptor/.libs$llp
  export LD_LIBRARY_PATH
  echo "$program: export LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
fi

gnu_arch=`./config.guess`
echo "$program: GNU System   $gnu_arch"

configure="./configure --prefix=$install"

# Non-standard JDK places
for jdkdir in `ls -1dr /usr/local/jdk* 2>/dev/null` /usr/j2se `ls -1dr /usr/lib/java* 2>/dev/null` /System/Library/Frameworks/JavaVM.framework /usr/local/packages/j2sdk; do
  if [ -d $jdkdir -a -r $jdkdir/bin/java ]; then
    echo "$program: Adding java JDK in $jdkdir to PATH"
    PATH=$jdkdir/bin:$PATH
    break;
  fi
done

hostname=`hostname`
case $hostname in
  hedwig.dajobe.org)
    RUBY=ruby1.8
    export RUBY
    # 8.4 does not seem to work
    TCL=tclsh8.3
    export TCL
    ;;
  tribble.ilrt.bris.ac.uk)
    # FreeBSD makes you use one version
    TCL=tclsh8.3
    export TCL
    ;;
  maris)
    TCL=tclsh8.3
    export TCL
    ;;
  *)
    ;;
esac


$configure > $logs/configure.log 2>&1
status=$?
if [ $status -ne 0 ]; then
  echo "$program: '$configure' failed"
  exit 1;
fi

echo "$program: '$configure' succeeded"

sed -n -e '/^  Berkeley/,/Content digests/p' $logs/configure.log

$MAKE > $logs/make.log 2>&1
status=$?
if [ $status -ne 0 ]; then
  echo "$program: '$MAKE' failed"
  exit 1;
fi

echo "$program: '$MAKE' succeeded"

$MAKE check > $logs/make-check.log 2>&1
status=$?
if [ $status -ne 0 ]; then
  echo "$program: '$MAKE check' failed"
  grep '^FAIL:' $logs/make-check.log
  exit 1;
fi

echo "$program: '$MAKE check' succeeded"

$MAKE install > $logs/make-install.log 2>&1
status=$?
if [ $status -ne 0 ]; then
  echo "$program: '$MAKE install' failed"
  grep '^FAIL:' $logs/make-install.log
  exit 1;
fi

echo "$program: '$MAKE install' succeeded"


LANGS_FAILED=
LANGS_OK=
LANGS=
for lang in perl python tcl java ruby php; do
  if [ -d $lang ]; then 
    cd $lang
    $MAKE test-$lang > $logs/$lang.log 2>&1
    status=$?
    if [ $status -ne 0 ]; then
      LANGS_FAILED="$LANGS_FAILED $lang"
    else
      LANGS_OK="$LANGS_OK $lang"
    fi
    cd ..
    LANGS="$LANGS $lang"
  fi
done

# LANGS_INSTALL_FAILED=
# LANGS_INSTALL_OK=
# for lang in $LANGS_OK fake; do
#   if [ -d $lang ]; then 
#     cd $lang
#     $MAKE install > $logs/$lang-install.log 2>&1
#     status=$?
#     if [ $status -ne 0 ]; then
#       LANGS_INSTALL_FAILED="$LANGS_INSTALL_FAILED $lang"
#     else
#       LANGS_INSTALL_OK="$LANGS_INSTALL_OK $lang"
#     fi
#     cd ..
#   fi
# done

if [ "X$LANGS" = X ]; then
  echo "$program: No language interfaces to build"
else
  echo "$program: Summary of language interface builds:"
  echo "  OK      $LANGS_OK"
#  echo "    Install OK      $LANGS_INSTALL_OK"
#  echo "    Install FAILED  $LANGS_INSTALL_FAILED"
  echo "  FAILED  $LANGS_FAILED"
fi

exit 0

#!/bin/sh
#
# Build redland and check it works.  Intended to be called via build-redland-on
#
# $Id$
#

program=`basename $0`

tarball=$1
if [ "X$tarball" = "X" ]; then
  echo "USAGE $program: PACKAGE-TARBALL" 1>&2
  exit 1
fi

if [ ! -r $tarball ]; then
  echo "$program: tarball $tarball not found"
  exit 1
fi

dirname=`echo $tarball | sed -e 's,^.*/,,' -e 's/\.tar\..*$//'`
package=`echo $dirname | sed -e 's/-[0-9].*$//'`
version=`echo $dirname | sed -e 's/^.*-//'`

here=`pwd`

# DIRS
working=$here/build
logs=$working/logs
build=$working/$dirname
install=$working/install

# FILES
log_file=$logs/$program.log
start_stamp=$logs/start-stamp
end_stamp=$logs/end-stamp
stamp=$logs/stamp

######################################################################

echo "$program: Building $package $version"
echo "$program: System       `uname -srmn`"
echo "$program: Working area $working"
echo "$program: Logs         $logs"

if test -d $working; then
  chmod -R u+w $working
  rm -rf $working
fi
mkdir $working $logs $install
touch $start_stamp

cd $working

MAKE=make
for make in gnumake gmake make; do
  ($make --version 2>&1 | grep 'GNU Make') >/dev/null 2>&1
  result=$?
  if test $result -eq 0 ; then
    MAKE=$make
    break
  fi
done
export MAKE


gunzip < $here/$tarball | tar xf -

cd $build

gnu_arch=`./config.guess`
echo "$program: GNU System   $gnu_arch"

configure="./configure --prefix=$install"

# Non-standard JDK places
# for jdkdir in `ls -1dr /usr/local/jdk* 2>/dev/null` /usr/j2se `ls -1dr /usr/lib/java* 2>/dev/null` /System/Library/Frameworks/JavaVM.framework /usr/local/packages/j2sdk; do
#   if [ -d $jdkdir -a -r $jdkdir/bin/java ]; then
#     echo "$program: Adding java JDK in $jdkdir to PATH"
#     PATH=$jdkdir/bin:$PATH
#     break;
#   fi
# done

hostname=`hostname`
case $hostname in
  hedwig.dajobe.org)
    RUBY=ruby1.8
    export RUBY
    # 8.4 does not seem to work
    TCL=tclsh8.3
    export TCL
    ;;
  tribble.ilrt.bris.ac.uk)
    # FreeBSD makes you use one version
    TCL=tclsh8.3
    export TCL
    ;;
  maris)
    TCL=tclsh8.3
    export TCL
    ;;
  *)
    ;;
esac


log=$logs/configure.log
touch $stamp
$configure > $log 2>&1
status=$?
delta=`perl -e "print int(86000*((-M '$stamp') - (-M '$log')))";`
if [ $status -ne 0 ]; then
  echo "$program: '$configure' failed ($delta secs)"
  exit 1;
fi

echo "$program: '$configure' succeeded ($delta secs)"

sed -n -e '/^  Berkeley/,/Content digests/p' $log

log=$logs/make.log
touch $stamp
$MAKE > $log 2>&1
status=$?
delta=`perl -e "print int(86000*((-M '$stamp') - (-M '$log')))";`
if [ $status -ne 0 ]; then
  echo "$program: '$MAKE' failed ($delta secs)"
  exit 1;
fi

echo "$program: '$MAKE' succeeded ($delta secs)"

log=$logs/make-check.log
touch $stamp
$MAKE check > $log 2>&1
status=$?
delta=`perl -e "print int(86000*((-M '$stamp') - (-M '$log')))";`
if [ $status -ne 0 ]; then
  echo "$program: '$MAKE check' failed ($delta secs)"
  grep '^FAIL:' $log
  exit 1;
fi

echo "$program: '$MAKE check' succeeded ($delta secs)"

log=$logs/make-install.log
touch $stamp
$MAKE install > $log 2>&1
status=$?
delta=`perl -e "print int(86000*((-M '$stamp') - (-M '$log')))";`
if [ $status -ne 0 ]; then
  echo "$program: '$MAKE install' failed ($delta secs)"
  grep '^FAIL:' $log
  exit 1;
fi

echo "$program: '$MAKE install' succeeded ($delta secs)"


LANGS_FAILED=
LANGS_OK=
LANGS=
lang_log=$logs/lang.log
touch $stamp
for lang in perl python tcl java ruby php csharp; do
  if [ -d $lang ]; then 
    cd $lang
    log=$logs/$lang.log
    $MAKE check > $logs/$lang.log 2>&1
    status=$?
    if [ $status -ne 0 ]; then
      LANGS_FAILED="$LANGS_FAILED $lang"
    else
      LANGS_OK="$LANGS_OK $lang"
    fi
    cd ..
    LANGS="$LANGS $lang"
  fi
done
if [ "X$LANGS" != X ]; then
  delta=`perl -e "print int(86000*((-M '$stamp') - (-M '$lang_log')))";`
  echo "$program: languages built ($delta secs)"
fi
rm -f $lang_log

# LANGS_INSTALL_FAILED=
# LANGS_INSTALL_OK=
# for lang in $LANGS_OK fake; do
#   if [ -d $lang ]; then 
#     cd $lang
#     $MAKE install > $logs/$lang-install.log 2>&1
#     status=$?
#     if [ $status -ne 0 ]; then
#       LANGS_INSTALL_FAILED="$LANGS_INSTALL_FAILED $lang"
#     else
#       LANGS_INSTALL_OK="$LANGS_INSTALL_OK $lang"
#     fi
#     cd ..
#   fi
# done

touch $end_stamp

if [ "X$LANGS" = X ]; then
  echo "$program: No language interfaces to build"
else
  echo "$program: Summary of language interface builds:"
  echo "  OK      $LANGS_OK"
#  echo "    Install OK      $LANGS_INSTALL_OK"
#  echo "    Install FAILED  $LANGS_INSTALL_FAILED"
  echo "  FAILED  $LANGS_FAILED"
fi

delta=`perl -e "print int(86000*((-M '$start_stamp') - (-M '$end_stamp')))";`
echo "$program: Total time taken: $delta secs"

rm -f $stamp $start_stamp $end_stamp

exit 0
